daml 1.2
module DA.Tectoro.C2BTrade where

import DA.Tectoro.Facts
import DA.Date()
import DA.List()
import DA.Optional()
import DA.Tectoro.B2EAgree

type TradeId = ContractId Trade

template TradeMaster
  with
    broker: Party
    commissionRate: Decimal
    typeOfTrade: Text
    agreement_date: Date
  where
    signatory broker

    controller broker can
             nonconsuming Invite : ContractId TradeIssueProposal
              with client: Party
              do create TradeIssueProposal
                   with tradeAgreement = TradeIssueAgreement with broker; client; commissionRate; typeOfTrade; agreement_date

template TradeIssueProposal
  with
    tradeAgreement: TradeIssueAgreement
  where
    signatory tradeAgreement.broker

    controller tradeAgreement.client can
       AcceptTradeProposal
        : ContractId TradeIssueAgreement
        do create tradeAgreement

template TradeIssueAgreement
  with
    broker: Party
    client: Party
    commissionRate: Decimal
    typeOfTrade: Text
    agreement_date: Date
  where
     signatory broker, client
     controller client can
      nonconsuming Order : ContractId Trade 
         with terms: OrderTerms
                 do
                create Trade with terms; broker,client; regulator = terms.regulator; commissionRate
        
template Trade
   with
    broker: Party
    client:Party
    regulator: Party
    terms: OrderTerms
    commissionRate: Decimal

  where
    signatory broker
    observer regulator, client, terms.exchange
    controller terms.exchange can    
       nonconsuming  Execute: ContractId TradeExecuted 
        with  executionId: Text
     
            do
                    create TradeExecuted with client; broker; regulator; terms; executionId; commissionRate
    
template TradeExecuted
   with
     broker: Party
     regulator: Party
     client: Party
     executionId: Text
     terms: OrderTerms
     commissionRate: Decimal

    where
     signatory broker
     observer terms.exchange, regulator, client
     controller broker can
        nonconsuming  Generate_Trade: ContractId TradeCreated
             with
               do
                (fetchedTradeExecutedCid, fetchedTradeExecuted) <- fetchByKey @BrokerTradeIssueAgreement (terms.exchange,broker) 
                do
                         let settlementAmount  =
                              if (terms.operation == "SELL")
                             then  ((terms.qty * terms.price) - (terms.price * terms.qty * commissionRate)/100.0 - (terms.price * terms.qty * fetchedTradeExecuted.exchangeFee)/100.0)
                             else   ((terms.qty * terms.price) + (terms.price * terms.qty * commissionRate)/100.0 + (terms.price * terms.qty * fetchedTradeExecuted.exchangeFee)/100.0)
                         create TradeCreated with  client; broker; principle =(terms.qty * terms.price); commissionPrice = (terms.price * terms.qty * commissionRate)/100.0; exchangePrice = (terms.price * terms.qty * fetchedTradeExecuted.exchangeFee)/100.0; settlementAmount;
                                                    terms; executionId

template TradeCreated
   with
   broker: Party
   client: Party
   terms: OrderTerms
   executionId: Text
   principle: Decimal
   commissionPrice: Decimal
   exchangePrice: Decimal
   settlementAmount: Decimal
    where
     signatory broker
     observer client
